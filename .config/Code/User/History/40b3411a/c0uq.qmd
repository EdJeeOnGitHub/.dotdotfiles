---
title: "TakeUp Distance Assignment"
format: html
editor: source 
---

```{r}
#| label: setup

library(magrittr)
library(tidyverse)
library(sf)
library(here)
library(broom)


source(here("rct-design-fieldwork", "takeup_rct_assign_clusters.R"))
source(here("analysis_util.R"))
source(here("dist_structural_util.R"))

theme_set(theme_minimal() + theme(legend.position = "bottom"))
```

```{r}
#| label: load-geo-data

wgs.84 <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
kenya.proj4 <- "+proj=utm +zone=36 +south +ellps=clrk80 +units=m +no_defs"

rct.schools.data <- read_rds(here("data", "takeup_rct_schools.rds"))
load(here("data", "takeup_village_pot_dist.RData"))
load(here("data", "analysis.RData"))

schools <- st_as_sf(rct.schools.data, crs = wgs.84)
villages <- village.centers %>% 
  st_as_sf(coords = c("lon", "lat"), crs = wgs.84)
```

```{r}
#| fig-width: 8

ggplot(schools) +
  geom_sf(aes(color = "Schools"), size = 0.5) +
  geom_sf(aes(color = "Villages"), data = villages) +
  scale_color_manual("", values = c("Schools" = "black", "Villages" = "red"))
```

```{r}
villages %<>% 
  mutate(
    dist_to_closest_school = st_transform(., kenya.proj4) %>% 
      st_distance(st_transform(schools, kenya.proj4)) %>%
      plyr::alply(1, min) %>% 
      unlist()
  )
```

```{r}
villages %>% 
  ggplot(aes(dist_to_closest_school)) +
  geom_histogram(aes(y = stat(density)), binwidth = 100, alpha = 0.5) +
  labs(x = "Distance to Closest School", y = "Density")

villages %>% 
  ggplot(aes(dist_to_closest_school)) +
  geom_histogram(aes(y = stat(density), fill = dist.pot.group), position = "identity", binwidth = 100, alpha = 0.5) +
  scale_fill_discrete("Distance Assignment", labels = str_to_title) +
  labs(x = "Distance to Closest School", y = "Density")
```



```{r}


villages %>% 
  select(dist.to.pot, dist_to_closest_school) %>%
  filter(dist.to.pot == dist_to_closest_school)

villages %>%
  summarise(n_vills = n_distinct(cluster.id))

vill_school_pairs = villages %>% 
  st_join(
    x = .,
    y = st_transform(schools, kenya.proj4),
    join = st_is_within_distance, 
    dist = 1500,
    left = TRUE
  ) 


install.packages("skimr")
schools %>%
  as_tibble() %>%
  skimr::skim()
vill_school_pairs %>%
  filter(dist_to_closest_school > 1500)
vill_school_pairs %>%
  tail() %>%
  select(`Pupil Teacher Ratio`)

all_vill_school_distances = st_distance(
  villages, 
  schools
)

expected_distance = apply(all_vill_school_distances, FUN = function(x){mean(x[x < 1500])}, MARGIN = 1)

villages$expected_distance = expected_distance


balance_vars = schools %>%
  select_if(is.numeric) %>%
  select(-contains("gps")) %>%
  st_drop_geometry() %>%
  colnames()

check_observables = function(data, variable, balance_vars) {

  balance_formulae = map(
    balance_vars,
    ~as.formula(paste0("`", .x,  "` ~ ", variable))
  )

  balance_fits = map2_dfr(
    balance_formulae,
    balance_vars,
    ~lm(
      .x,
      data = data,
      na.action = na.omit
    ) %>% tidy()  %>% mutate(variable = .y)
  ) %>%
    filter(!str_detect(term, "Intercept"))
    return(balance_fits)
}

summ_vill_school_pairs = vill_school_pairs %>%
  group_by(cluster.id.x) %>%
  mutate(close_group = dist.pot.group == "close") %>%
  summarise_all(~mean(.x, na.rm = TRUE))

dist_pot_check = check_observables(
  vill_school_pairs,
  variable = "log(dist.to.pot) + factor(cluster.id.x)",
  balance_vars = balance_vars
)

dist_pot_group_check = check_observables(
  vill_school_pairs,
  variable = "dist.pot.group + factor(cluster.id.x)",
  balance_vars = balance_vars
)

dist_closest_school_check = check_observables(
  vill_school_pairs,
  variable = "log(dist_to_closest_school) + factor(cluster.id.x)",
  balance_vars = balance_vars
)

dist_pot_weight_check = check_observables(
  vill_school_pairs,
  variable = "log(dist.to.pot) + log(expected_distance) + factor(cluster.id.x)",
  balance_vars = balance_vars
)

dist_checks = bind_rows(
  dist_closest_school_check,
  dist_pot_group_check,
  dist_pot_check,
  dist_pot_weight_check %>%
    filter(term == "log(dist.to.pot)") %>%
    mutate(term = str_c(term, " reweighted"))
) %>%
  filter(!is.nan(p.value)) 


dist_checks %>%
  group_by(term) %>%
  mutate(p_adj = p.adjust(p.value, method = "BH")) %>%
  filter(p_adj < 0.05)


vill_school_pairs %>%
  filter()

dist_checks %>%
  filter(!str_detect(term ,"cluster"))

dist_checks %>%
filter(!str_detect(term, "cluster")) %>%
  ggplot(aes( 
    sample = p.value,
    colour = term
  )) +
  stat_qq(distribution = stats::qunif,
          alpha = 1, geom = "line") +
  stat_qq_line(distribution = stats::qunif,
               colour = "black",linetype = "longdash") +
  theme_bw() +
  labs(
      x = "Theoretical Quantile", 
      y = "Realised Quantile"
  )


balance_fits %>% 
  ggplot(aes(
    sample = p.value
  )) +
  stat_qq(distribution = stats::qunif,
          alpha = 1) +
  stat_qq_line(distribution = stats::qunif,
               colour = "black",linetype = "longdash") +
  theme_bw() +
  guides(colour = "none")  +
  labs(
      x = "Theoretical Quantile", 
      y = "Realised Quantile"
  )

balance_fits %>%
  filter(!is.nan(p.value)) %>%
  mutate(p_adj = p.adjust(p.value, method = "BH"))

lm(
  `Status of School` ~ dist.to.pot,
  data = vill_school_pairs %>%
    filter(!is.na(`Status of School`))
)
vill_school_pairs %>%
  select(`Status of School`) %>%
  st_drop_geometry() %>%
  unique()
vill_school_pairs %>%
  lm(
    `Status of School` ~ log(dist.to.pot),
    data = .
  ) %>%
    tidy()

vill_school_pairs$`Status of School`

villages %>%
  lm()
all_vill_school_pairs %>%
  colnames()
all_vill_school_pairs %>%
  select(cluster.id.x, cluster.id.y)
all_vill_school_pairs %>%
  filter(dist.to)


all_vill_school_pairs %>%
  mutate(
    dist_to_closest_school = st_transform(., kenya.proj4) %>% 
      st_distance(st_transform(schools[schools$cluster.id == .$cluster.id.y], kenya.proj4)) %>%
      plyr::alply(1, unique) %>% 
      unlist()
  )

all_vill_school_pairs %>%
  select(dist_to_school)
```

